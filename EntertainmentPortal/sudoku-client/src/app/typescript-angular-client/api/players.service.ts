/**
 * My Title
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent } from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs';

import { CreatePlayerCommand } from '../model/createPlayerCommand';
import { Player } from '../model/player';
import { UpdatePlayerCommand } from '../model/updatePlayerCommand';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';


@Injectable()
export class PlayersService {

    //protected basePath = 'http://localhost:58857';
    protected basePath = 'https://localhost:44332';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Creates a new player and saves information about him/her in the Db.
     *
     * @param model
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public playersCreatePlayer(model: CreatePlayerCommand, observe?: 'body', reportProgress?: boolean): Observable<Player>;
    public playersCreatePlayer(model: CreatePlayerCommand, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Player>>;
    public playersCreatePlayer(model: CreatePlayerCommand, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Player>>;
    public playersCreatePlayer(model: CreatePlayerCommand, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling playersCreatePlayer.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Player>(`${this.basePath}/api/players`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Removes the whole information about a chosen player from the Db.
     *
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public playersDeletePlayer(id?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public playersDeletePlayer(id?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public playersDeletePlayer(id?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public playersDeletePlayer(id?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/api/players`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Changes the known information about a chosen player and saves it in the Db.
     *
     * @param model
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public playersEditPlayer(model: UpdatePlayerCommand, observe?: 'body', reportProgress?: boolean): Observable<Player>;
    public playersEditPlayer(model: UpdatePlayerCommand, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Player>>;
    public playersEditPlayer(model: UpdatePlayerCommand, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Player>>;
    public playersEditPlayer(model: UpdatePlayerCommand, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling playersEditPlayer.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Player>(`${this.basePath}/api/players`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Fetches all registered players from the Db.
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public playersGetAllPlayer(observe?: 'body', reportProgress?: boolean): Observable<Array<Player>>;
    public playersGetAllPlayer(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Player>>>;
    public playersGetAllPlayer(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Player>>>;
    public playersGetAllPlayer(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Player>>(`${this.basePath}/api/players`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Fetches a player of the game from the Db by the unique Id.
     *
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public playersGetPlayerById(id: number, observe?: 'body', reportProgress?: boolean): Observable<Player>;
    public playersGetPlayerById(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Player>>;
    public playersGetPlayerById(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Player>>;
    public playersGetPlayerById(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling playersGetPlayerById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Player>(`${this.basePath}/api/players/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
